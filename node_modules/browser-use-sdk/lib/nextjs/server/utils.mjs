/**
 * Convert an async generator to a stream.
 *
 * @param gen - The async generator to convert to a stream.
 * @returns A stream of the async generator.
 */
export function gtos(gen, opts) {
    const enc = new TextEncoder();
    const stream = new ReadableStream({
        async start(controller) {
            // open the SSE stream quickly
            controller.enqueue(enc.encode(': connected\n\n'));
            try {
                for await (const msg of gen) {
                    opts?.onEvent?.(msg.data);
                    const data = {
                        event: msg.event,
                        data: msg.data,
                    };
                    const encoded = JSON.stringify(data);
                    const payload = `event: ${msg.event}\ndata: ${encoded}\n\n`;
                    controller.enqueue(enc.encode(payload));
                    if (msg.data.status === 'finished') {
                        opts?.onFinished?.(msg.data);
                    }
                }
                controller.enqueue(enc.encode('event: end\ndata: {}\n\n'));
            }
            catch (e) {
                controller.enqueue(enc.encode(`event: error\ndata: ${JSON.stringify({ message: String(e) })}\n\n`));
            }
            finally {
                controller.close();
            }
        },
    });
    return stream;
}
//# sourceMappingURL=utils.mjs.map