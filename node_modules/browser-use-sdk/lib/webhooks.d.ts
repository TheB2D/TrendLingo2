import { z } from 'zod';
export declare const zWebhookTimestamp: z.ZodISODateTime;
export declare const zWebhookTestPayload: z.ZodObject<{
    test: z.ZodLiteral<"ok">;
}, z.core.$strip>;
export type WebhookTestPayload = z.infer<typeof zWebhookTestPayload>;
export declare const zWebhookTest: z.ZodObject<{
    type: z.ZodLiteral<"test">;
    timestamp: z.ZodISODateTime;
    payload: z.ZodObject<{
        test: z.ZodLiteral<"ok">;
    }, z.core.$strip>;
}, z.core.$strip>;
export declare const zWebhookAgentTaskStatusUpdatePayloadMetadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
export declare const zWebhookAgentTaskStatusUpdatePayloadStatus: z.ZodLiteral<"started" | "paused" | "finished" | "stopped" | "initializing">;
export declare const zWebhookAgentTaskStatusUpdatePayload: z.ZodObject<{
    session_id: z.ZodString;
    task_id: z.ZodString;
    status: z.ZodLiteral<"started" | "paused" | "finished" | "stopped" | "initializing">;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, z.core.$strip>;
export type WebhookAgentTaskStatusUpdatePayload = z.infer<typeof zWebhookAgentTaskStatusUpdatePayload>;
export declare const zWebhookAgentTaskStatusUpdate: z.ZodObject<{
    type: z.ZodLiteral<"agent.task.status_update">;
    timestamp: z.ZodISODateTime;
    payload: z.ZodObject<{
        session_id: z.ZodString;
        task_id: z.ZodString;
        status: z.ZodLiteral<"started" | "paused" | "finished" | "stopped" | "initializing">;
        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }, z.core.$strip>;
}, z.core.$strip>;
export declare const zWebhookSchema: z.ZodDiscriminatedUnion<[z.ZodObject<{
    type: z.ZodLiteral<"test">;
    timestamp: z.ZodISODateTime;
    payload: z.ZodObject<{
        test: z.ZodLiteral<"ok">;
    }, z.core.$strip>;
}, z.core.$strip>, z.ZodObject<{
    type: z.ZodLiteral<"agent.task.status_update">;
    timestamp: z.ZodISODateTime;
    payload: z.ZodObject<{
        session_id: z.ZodString;
        task_id: z.ZodString;
        status: z.ZodLiteral<"started" | "paused" | "finished" | "stopped" | "initializing">;
        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }, z.core.$strip>;
}, z.core.$strip>], "type">;
export type Webhook = z.infer<typeof zWebhookSchema>;
/**
 * Utility function that validates the received Webhook event/
 */
export declare function verifyWebhookEventSignature(evt: {
    body: string | object;
    signature: string;
    timestamp: string;
}, cfg: {
    secret: string;
}): Promise<{
    ok: true;
    event: Webhook;
} | {
    ok: false;
}>;
/**
 * Creates a webhook signature for the given payload, timestamp, and secret.
 */
export declare function createWebhookSignature({ payload, timestamp, secret, }: {
    payload: unknown;
    timestamp: string;
    secret: string;
}): string;
//# sourceMappingURL=webhooks.d.ts.map