"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sessions = void 0;
const tslib_1 = require("../../internal/tslib.js");
const resource_1 = require("../../core/resource.js");
const PublicShareAPI = tslib_1.__importStar(require("./public-share.js"));
const public_share_1 = require("./public-share.js");
const headers_1 = require("../../internal/headers.js");
const path_1 = require("../../internal/utils/path.js");
class Sessions extends resource_1.APIResource {
    constructor() {
        super(...arguments);
        this.publicShare = new PublicShareAPI.PublicShare(this._client);
    }
    /**
     * Get detailed information about a specific AI agent session.
     *
     * Retrieves comprehensive information about a session, including its current
     * status, live browser URL (if active), recording URL (if completed), and optional
     * task details. This endpoint is useful for monitoring active sessions or
     * reviewing completed ones.
     *
     * Args:
     *
     * - session_id: The unique identifier of the agent session
     * - params: Optional parameters to control what data is included
     *
     * Returns:
     *
     * - Complete session information including status, URLs, and optional task details
     *
     * Raises:
     *
     * - 404: If the user agent session doesn't exist
     */
    retrieve(sessionID, options) {
        return this._client.get((0, path_1.path) `/sessions/${sessionID}`, options);
    }
    /**
     * Update a session's status or perform actions on it.
     *
     * Currently supports stopping a session, which will:
     *
     * 1. Stop any running tasks in the session
     * 2. End the browser session
     * 3. Generate a recording URL if available
     * 4. Update the session status to 'stopped'
     *
     * This is useful for manually stopping long-running sessions or when you want to
     * end a session before all tasks are complete.
     *
     * Args:
     *
     * - session_id: The unique identifier of the agent session to update
     * - request: The action to perform on the session
     *
     * Returns:
     *
     * - The updated session information including the new status and recording URL
     *
     * Raises:
     *
     * - 404: If the user agent session doesn't exist
     */
    update(sessionID, body, options) {
        return this._client.patch((0, path_1.path) `/sessions/${sessionID}`, { body, ...options });
    }
    /**
     * Get a paginated list of all AI agent sessions for the authenticated user.
     *
     * AI agent sessions represent active or completed browsing sessions where your AI
     * agents perform tasks. Each session can contain multiple tasks and maintains
     * browser state throughout the session lifecycle.
     *
     * You can filter sessions by status and optionally include task details for each
     * session.
     *
     * Returns:
     *
     * - A paginated list of agent sessions
     * - Total count of sessions
     * - Page information for navigation
     * - Optional task details for each session (if requested)
     */
    list(query = {}, options) {
        return this._client.get('/sessions', { query, ...options });
    }
    /**
     * Delete a session and all its associated data.
     *
     * Permanently removes a session and all its tasks, browser data, and public
     * shares. This action cannot be undone. Use this endpoint to clean up old sessions
     * and free up storage space.
     *
     * Args:
     *
     * - session_id: The unique identifier of the agent session to delete
     *
     * Returns:
     *
     * - 204 No Content on successful deletion (idempotent)
     */
    delete(sessionID, options) {
        return this._client.delete((0, path_1.path) `/sessions/${sessionID}`, {
            ...options,
            headers: (0, headers_1.buildHeaders)([{ Accept: '*/*' }, options?.headers]),
        });
    }
}
exports.Sessions = Sessions;
Sessions.PublicShare = public_share_1.PublicShare;
//# sourceMappingURL=sessions.js.map