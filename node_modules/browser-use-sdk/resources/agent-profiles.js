"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentProfiles = void 0;
const resource_1 = require("../core/resource.js");
const headers_1 = require("../internal/headers.js");
const path_1 = require("../internal/utils/path.js");
class AgentProfiles extends resource_1.APIResource {
    /**
     * Create a new agent profile for the authenticated user.
     *
     * Agent profiles define how your AI agents behave during tasks. You can create
     * multiple profiles for different use cases (e.g., customer support, data
     * analysis, web scraping). Free users can create 1 profile; paid users can create
     * unlimited profiles.
     *
     * Key features you can configure:
     *
     * - System prompt: The core instructions that define the agent's personality and
     *   behavior
     * - Allowed domains: Restrict which websites the agent can access
     * - Max steps: Limit how many actions the agent can take in a single task
     * - Vision: Enable/disable the agent's ability to see and analyze screenshots
     * - Thinking: Enable/disable the agent's reasoning process
     *
     * Args:
     *
     * - request: The agent profile configuration including name, description, and
     *   behavior settings
     *
     * Returns:
     *
     * - The newly created agent profile with all its details
     *
     * Raises:
     *
     * - 402: If user needs a subscription to create additional profiles
     */
    create(body, options) {
        return this._client.post('/agent-profiles', { body, ...options });
    }
    /**
     * Get a specific agent profile by its ID.
     *
     * Retrieves the complete details of an agent profile, including all its
     * configuration settings like system prompts, allowed domains, and behavior flags.
     *
     * Args:
     *
     * - profile_id: The unique identifier of the agent profile
     *
     * Returns:
     *
     * - Complete agent profile information
     *
     * Raises:
     *
     * - 404: If the user agent profile doesn't exist
     */
    retrieve(profileID, options) {
        return this._client.get((0, path_1.path) `/agent-profiles/${profileID}`, options);
    }
    /**
     * Update an existing agent profile.
     *
     * Modify any aspect of an agent profile, such as its name, description, system
     * prompt, or behavior settings. Only the fields you provide will be updated; other
     * fields remain unchanged.
     *
     * Args:
     *
     * - profile_id: The unique identifier of the agent profile to update
     * - request: The fields to update (only provided fields will be changed)
     *
     * Returns:
     *
     * - The updated agent profile with all its current details
     *
     * Raises:
     *
     * - 404: If the user agent profile doesn't exist
     */
    update(profileID, body, options) {
        return this._client.patch((0, path_1.path) `/agent-profiles/${profileID}`, { body, ...options });
    }
    /**
     * Get a paginated list of all agent profiles for the authenticated user.
     *
     * Agent profiles define how your AI agents behave, including their personality,
     * capabilities, and limitations. Use this endpoint to see all your configured
     * agent profiles.
     *
     * Returns:
     *
     * - A paginated list of agent profiles
     * - Total count of profiles
     * - Page information for navigation
     */
    list(query = {}, options) {
        return this._client.get('/agent-profiles', { query, ...options });
    }
    /**
     * Delete an agent profile.
     *
     * Permanently removes an agent profile and all its configuration. This action
     * cannot be undone. Any tasks that were using this profile will continue to work,
     * but you won't be able to create new tasks with the deleted profile.
     *
     * Args:
     *
     * - profile_id: The unique identifier of the agent profile to delete
     *
     * Returns:
     *
     * - 204 No Content on successful deletion (idempotent)
     */
    delete(profileID, options) {
        return this._client.delete((0, path_1.path) `/agent-profiles/${profileID}`, {
            ...options,
            headers: (0, headers_1.buildHeaders)([{ Accept: '*/*' }, options?.headers]),
        });
    }
}
exports.AgentProfiles = AgentProfiles;
//# sourceMappingURL=agent-profiles.js.map